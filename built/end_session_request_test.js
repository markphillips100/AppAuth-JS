"use strict";
/*
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var end_session_request_1 = require("./end_session_request");
describe('EndSessionRequest Tests', function () {
    var idTokenHint = 'id_token_hint';
    var postLogoutRedirectUri = 'http://my/post_logout_redirect_uri';
    var state = 'state';
    var extras = { 'key': 'value' };
    var request = new end_session_request_1.EndSessionRequest({
        id_token_hint: idTokenHint,
        post_logout_redirect_uri: postLogoutRedirectUri,
        state: state,
        extras: extras
    });
    var request2 = new end_session_request_1.EndSessionRequest({
        id_token_hint: idTokenHint,
        post_logout_redirect_uri: postLogoutRedirectUri,
        state: undefined,
        extras: extras
    });
    it('Basic EndSession Request Tests', function () {
        expect(request).not.toBeNull();
        expect(request.idTokenHint).toBe(idTokenHint);
        expect(request.postLogoutRedirectUri).toBe(postLogoutRedirectUri);
        expect(request.state).toBe(state);
        expect(request.extras).toBeTruthy();
        expect(request.extras['key']).toBe('value');
        expect(request.extras).toEqual(extras);
    });
    it('To Json() and from Json() should work', function (done) {
        var json = JSON.parse(JSON.stringify(request.toJson()));
        expect(json).not.toBeNull();
        var newRequest = new end_session_request_1.EndSessionRequest(json);
        expect(newRequest).not.toBeNull();
        expect(newRequest.idTokenHint).toBe(idTokenHint);
        expect(newRequest.postLogoutRedirectUri).toBe(postLogoutRedirectUri);
        expect(newRequest.state).toBe(state);
        expect(newRequest.extras).toBeTruthy();
        expect(newRequest.extras['key']).toBe('value');
        expect(newRequest.extras).toEqual(extras);
    });
    it('Expect cryptographic newState() to populate state', function () {
        expect(request2.state).not.toBeNull();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5kX3Nlc3Npb25fcmVxdWVzdF90ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2VuZF9zZXNzaW9uX3JlcXVlc3RfdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7OztHQVlHOztBQUVILDZEQUF3RDtBQUd4RCxRQUFRLENBQUMseUJBQXlCLEVBQUU7SUFDbEMsSUFBTSxXQUFXLEdBQUcsZUFBZSxDQUFDO0lBQ3BDLElBQU0scUJBQXFCLEdBQUcsb0NBQW9DLENBQUM7SUFDbkUsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDO0lBQ3RCLElBQU0sTUFBTSxHQUFjLEVBQUMsS0FBSyxFQUFFLE9BQU8sRUFBQyxDQUFDO0lBRTNDLElBQUksT0FBTyxHQUFzQixJQUFJLHVDQUFpQixDQUFDO1FBQ3JELGFBQWEsRUFBRSxXQUFXO1FBQzFCLHdCQUF3QixFQUFFLHFCQUFxQjtRQUMvQyxLQUFLLEVBQUUsS0FBSztRQUNaLE1BQU0sRUFBRSxNQUFNO0tBQ2YsQ0FBQyxDQUFDO0lBRUgsSUFBSSxRQUFRLEdBQXNCLElBQUksdUNBQWlCLENBQUM7UUFDdEQsYUFBYSxFQUFFLFdBQVc7UUFDMUIsd0JBQXdCLEVBQUUscUJBQXFCO1FBQy9DLEtBQUssRUFBRSxTQUFTO1FBQ2hCLE1BQU0sRUFBRSxNQUFNO0tBQ2YsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdDQUFnQyxFQUFFO1FBQ25DLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDL0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDOUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsdUNBQXVDLEVBQUUsVUFBQyxJQUFZO1FBQ3ZELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDNUIsSUFBSSxVQUFVLEdBQUcsSUFBSSx1Q0FBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNyRSxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2hELE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG1EQUFtRCxFQUFFO1FBQ3RELE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3hDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdFxuICogaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZVxuICogTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtFbmRTZXNzaW9uUmVxdWVzdH0gZnJvbSAnLi9lbmRfc2Vzc2lvbl9yZXF1ZXN0JztcbmltcG9ydCB7U3RyaW5nTWFwfSBmcm9tICcuL3R5cGVzJztcblxuZGVzY3JpYmUoJ0VuZFNlc3Npb25SZXF1ZXN0IFRlc3RzJywgKCkgPT4ge1xuICBjb25zdCBpZFRva2VuSGludCA9ICdpZF90b2tlbl9oaW50JztcbiAgY29uc3QgcG9zdExvZ291dFJlZGlyZWN0VXJpID0gJ2h0dHA6Ly9teS9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmknO1xuICBjb25zdCBzdGF0ZSA9ICdzdGF0ZSc7XG4gIGNvbnN0IGV4dHJhczogU3RyaW5nTWFwID0geydrZXknOiAndmFsdWUnfTtcblxuICBsZXQgcmVxdWVzdDogRW5kU2Vzc2lvblJlcXVlc3QgPSBuZXcgRW5kU2Vzc2lvblJlcXVlc3Qoe1xuICAgIGlkX3Rva2VuX2hpbnQ6IGlkVG9rZW5IaW50LFxuICAgIHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaTogcG9zdExvZ291dFJlZGlyZWN0VXJpLFxuICAgIHN0YXRlOiBzdGF0ZSxcbiAgICBleHRyYXM6IGV4dHJhc1xuICB9KTtcblxuICBsZXQgcmVxdWVzdDI6IEVuZFNlc3Npb25SZXF1ZXN0ID0gbmV3IEVuZFNlc3Npb25SZXF1ZXN0KHtcbiAgICBpZF90b2tlbl9oaW50OiBpZFRva2VuSGludCxcbiAgICBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmk6IHBvc3RMb2dvdXRSZWRpcmVjdFVyaSxcbiAgICBzdGF0ZTogdW5kZWZpbmVkLFxuICAgIGV4dHJhczogZXh0cmFzXG4gIH0pO1xuXG4gIGl0KCdCYXNpYyBFbmRTZXNzaW9uIFJlcXVlc3QgVGVzdHMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHJlcXVlc3QpLm5vdC50b0JlTnVsbCgpO1xuICAgIGV4cGVjdChyZXF1ZXN0LmlkVG9rZW5IaW50KS50b0JlKGlkVG9rZW5IaW50KTtcbiAgICBleHBlY3QocmVxdWVzdC5wb3N0TG9nb3V0UmVkaXJlY3RVcmkpLnRvQmUocG9zdExvZ291dFJlZGlyZWN0VXJpKTtcbiAgICBleHBlY3QocmVxdWVzdC5zdGF0ZSkudG9CZShzdGF0ZSk7XG4gICAgZXhwZWN0KHJlcXVlc3QuZXh0cmFzKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KHJlcXVlc3QuZXh0cmFzIVsna2V5J10pLnRvQmUoJ3ZhbHVlJyk7XG4gICAgZXhwZWN0KHJlcXVlc3QuZXh0cmFzKS50b0VxdWFsKGV4dHJhcyk7XG4gIH0pO1xuXG4gIGl0KCdUbyBKc29uKCkgYW5kIGZyb20gSnNvbigpIHNob3VsZCB3b3JrJywgKGRvbmU6IERvbmVGbikgPT4ge1xuICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXF1ZXN0LnRvSnNvbigpKSk7XG4gICAgZXhwZWN0KGpzb24pLm5vdC50b0JlTnVsbCgpO1xuICAgIGxldCBuZXdSZXF1ZXN0ID0gbmV3IEVuZFNlc3Npb25SZXF1ZXN0KGpzb24pO1xuICAgIGV4cGVjdChuZXdSZXF1ZXN0KS5ub3QudG9CZU51bGwoKTtcbiAgICBleHBlY3QobmV3UmVxdWVzdC5pZFRva2VuSGludCkudG9CZShpZFRva2VuSGludCk7XG4gICAgZXhwZWN0KG5ld1JlcXVlc3QucG9zdExvZ291dFJlZGlyZWN0VXJpKS50b0JlKHBvc3RMb2dvdXRSZWRpcmVjdFVyaSk7XG4gICAgZXhwZWN0KG5ld1JlcXVlc3Quc3RhdGUpLnRvQmUoc3RhdGUpO1xuICAgIGV4cGVjdChuZXdSZXF1ZXN0LmV4dHJhcykudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChuZXdSZXF1ZXN0LmV4dHJhcyFbJ2tleSddKS50b0JlKCd2YWx1ZScpO1xuICAgIGV4cGVjdChuZXdSZXF1ZXN0LmV4dHJhcykudG9FcXVhbChleHRyYXMpO1xuICB9KTtcblxuICBpdCgnRXhwZWN0IGNyeXB0b2dyYXBoaWMgbmV3U3RhdGUoKSB0byBwb3B1bGF0ZSBzdGF0ZScsICgpID0+IHtcbiAgICBleHBlY3QocmVxdWVzdDIuc3RhdGUpLm5vdC50b0JlTnVsbCgpO1xuICB9KTtcbn0pO1xuIl19